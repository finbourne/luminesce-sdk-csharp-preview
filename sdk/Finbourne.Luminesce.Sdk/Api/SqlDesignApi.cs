/*
 * FINBOURNE Luminesce Web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.16.430
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Luminesce.Sdk.Client;
using Finbourne.Luminesce.Sdk.Model;

namespace Finbourne.Luminesce.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlDesignApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <returns>FileReaderBuilderResponse</returns>
        FileReaderBuilderResponse PutFileReadDesignToSql(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?));

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <returns>ApiResponse of FileReaderBuilderResponse</returns>
        ApiResponse<FileReaderBuilderResponse> PutFileReadDesignToSqlWithHttpInfo(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?));
        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create an inlined properties Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <returns>InlinedPropertyDesign</returns>
        InlinedPropertyDesign PutInlinedPropertiesDesignSqlToDesign(string body = default(string));

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create an inlined properties Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <returns>ApiResponse of InlinedPropertyDesign</returns>
        ApiResponse<InlinedPropertyDesign> PutInlinedPropertiesDesignSqlToDesignWithHttpInfo(string body = default(string));
        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design
        /// </summary>
        /// <remarks>
        /// Inlined properties Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <returns>string</returns>
        string PutInlinedPropertiesDesignToSql(InlinedPropertyDesign inlinedPropertyDesign);

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design
        /// </summary>
        /// <remarks>
        /// Inlined properties Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutInlinedPropertiesDesignToSqlWithHttpInfo(InlinedPropertyDesign inlinedPropertyDesign);
        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location
        /// </summary>
        /// <remarks>
        /// SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <returns>IntellisenseResponse</returns>
        IntellisenseResponse PutIntellisense(IntellisenseRequest intellisenseRequest);

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location
        /// </summary>
        /// <remarks>
        /// SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <returns>ApiResponse of IntellisenseResponse</returns>
        ApiResponse<IntellisenseResponse> PutIntellisenseWithHttpInfo(IntellisenseRequest intellisenseRequest);
        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines)
        /// </summary>
        /// <remarks>
        /// SQL (by line) to syntax check and return error ranges from within, if any.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <returns>ErrorHighlightResponse</returns>
        ErrorHighlightResponse PutIntellisenseError(ErrorHighlightRequest errorHighlightRequest);

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines)
        /// </summary>
        /// <remarks>
        /// SQL (by line) to syntax check and return error ranges from within, if any.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <returns>ApiResponse of ErrorHighlightResponse</returns>
        ApiResponse<ErrorHighlightResponse> PutIntellisenseErrorWithHttpInfo(ErrorHighlightRequest errorHighlightRequest);
        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <returns>string</returns>
        string PutQueryDesignToSql(QueryDesign queryDesign);

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutQueryDesignToSqlWithHttpInfo(QueryDesign queryDesign);
        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.
        /// </summary>
        /// <remarks>
        ///  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <returns>string</returns>
        string PutQueryToFormat(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?));

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.
        /// </summary>
        /// <remarks>
        ///  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutQueryToFormatWithHttpInfo(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement
        /// </summary>
        /// <remarks>
        /// SQL to extract scalar parameters from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <returns>ICollection&lt;ScalarParameter&gt;</returns>
        ICollection<ScalarParameter> PutSqlToExtractScalarParameters(string body);

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement
        /// </summary>
        /// <remarks>
        /// SQL to extract scalar parameters from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <returns>ApiResponse of ICollection&lt;ScalarParameter&gt;</returns>
        ApiResponse<ICollection<ScalarParameter>> PutSqlToExtractScalarParametersWithHttpInfo(string body);
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <returns>FileReaderBuilderDef</returns>
        FileReaderBuilderDef PutSqlToFileReadDesign(bool? determineAvailableSources = default(bool?), string body = default(string));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <returns>ApiResponse of FileReaderBuilderDef</returns>
        ApiResponse<FileReaderBuilderDef> PutSqlToFileReadDesignWithHttpInfo(bool? determineAvailableSources = default(bool?), string body = default(string));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <returns>QueryDesign</returns>
        QueryDesign PutSqlToQueryDesign(string body, bool? validateWithMetadata = default(bool?));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <returns>ApiResponse of QueryDesign</returns>
        ApiResponse<QueryDesign> PutSqlToQueryDesignWithHttpInfo(string body, bool? validateWithMetadata = default(bool?));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL.
        /// </summary>
        /// <remarks>
        /// SQL which creates a view into a structured ConvertToViewData object
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <returns>ConvertToViewData</returns>
        ConvertToViewData PutSqlToViewDesign(string body);

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL.
        /// </summary>
        /// <remarks>
        /// SQL which creates a view into a structured ConvertToViewData object
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <returns>ApiResponse of ConvertToViewData</returns>
        ApiResponse<ConvertToViewData> PutSqlToViewDesignWithHttpInfo(string body);
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Writer Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <returns>WriterDesign</returns>
        WriterDesign PutSqlToWriterDesign(string body, bool? mergeAdditionalMappingFields = default(bool?));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Writer Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <returns>ApiResponse of WriterDesign</returns>
        ApiResponse<WriterDesign> PutSqlToWriterDesignWithHttpInfo(string body, bool? mergeAdditionalMappingFields = default(bool?));
        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design
        /// </summary>
        /// <remarks>
        /// Converts a ConvertToView specification into SQL that creates a view
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <returns>string</returns>
        string PutViewDesignToSql(ConvertToViewData convertToViewData);

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design
        /// </summary>
        /// <remarks>
        /// Converts a ConvertToView specification into SQL that creates a view
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutViewDesignToSqlWithHttpInfo(ConvertToViewData convertToViewData);
        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure
        /// </summary>
        /// <remarks>
        /// SQL Writer Design specification to generate Writer SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <returns>string</returns>
        string PutWriterDesignToSql(WriterDesign writerDesign);

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure
        /// </summary>
        /// <remarks>
        /// SQL Writer Design specification to generate Writer SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWriterDesignToSqlWithHttpInfo(WriterDesign writerDesign);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlDesignApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileReaderBuilderResponse</returns>
        System.Threading.Tasks.Task<FileReaderBuilderResponse> PutFileReadDesignToSqlAsync(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileReaderBuilderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileReaderBuilderResponse>> PutFileReadDesignToSqlWithHttpInfoAsync(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create an inlined properties Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlinedPropertyDesign</returns>
        System.Threading.Tasks.Task<InlinedPropertyDesign> PutInlinedPropertiesDesignSqlToDesignAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create an inlined properties Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlinedPropertyDesign)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlinedPropertyDesign>> PutInlinedPropertiesDesignSqlToDesignWithHttpInfoAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design
        /// </summary>
        /// <remarks>
        /// Inlined properties Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutInlinedPropertiesDesignToSqlAsync(InlinedPropertyDesign inlinedPropertyDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design
        /// </summary>
        /// <remarks>
        /// Inlined properties Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutInlinedPropertiesDesignToSqlWithHttpInfoAsync(InlinedPropertyDesign inlinedPropertyDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location
        /// </summary>
        /// <remarks>
        /// SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntellisenseResponse</returns>
        System.Threading.Tasks.Task<IntellisenseResponse> PutIntellisenseAsync(IntellisenseRequest intellisenseRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location
        /// </summary>
        /// <remarks>
        /// SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntellisenseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntellisenseResponse>> PutIntellisenseWithHttpInfoAsync(IntellisenseRequest intellisenseRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines)
        /// </summary>
        /// <remarks>
        /// SQL (by line) to syntax check and return error ranges from within, if any.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErrorHighlightResponse</returns>
        System.Threading.Tasks.Task<ErrorHighlightResponse> PutIntellisenseErrorAsync(ErrorHighlightRequest errorHighlightRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines)
        /// </summary>
        /// <remarks>
        /// SQL (by line) to syntax check and return error ranges from within, if any.
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErrorHighlightResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErrorHighlightResponse>> PutIntellisenseErrorWithHttpInfoAsync(ErrorHighlightRequest errorHighlightRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutQueryDesignToSqlAsync(QueryDesign queryDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design
        /// </summary>
        /// <remarks>
        /// SQL Designer specification to generate SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutQueryDesignToSqlWithHttpInfoAsync(QueryDesign queryDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.
        /// </summary>
        /// <remarks>
        ///  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutQueryToFormatAsync(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.
        /// </summary>
        /// <remarks>
        ///  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutQueryToFormatWithHttpInfoAsync(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement
        /// </summary>
        /// <remarks>
        /// SQL to extract scalar parameters from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;ScalarParameter&gt;</returns>
        System.Threading.Tasks.Task<ICollection<ScalarParameter>> PutSqlToExtractScalarParametersAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement
        /// </summary>
        /// <remarks>
        /// SQL to extract scalar parameters from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ScalarParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<ScalarParameter>>> PutSqlToExtractScalarParametersWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileReaderBuilderDef</returns>
        System.Threading.Tasks.Task<FileReaderBuilderDef> PutSqlToFileReadDesignAsync(bool? determineAvailableSources = default(bool?), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileReaderBuilderDef)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileReaderBuilderDef>> PutSqlToFileReadDesignWithHttpInfoAsync(bool? determineAvailableSources = default(bool?), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryDesign</returns>
        System.Threading.Tasks.Task<QueryDesign> PutSqlToQueryDesignAsync(string body, bool? validateWithMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryDesign)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryDesign>> PutSqlToQueryDesignWithHttpInfoAsync(string body, bool? validateWithMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL.
        /// </summary>
        /// <remarks>
        /// SQL which creates a view into a structured ConvertToViewData object
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertToViewData</returns>
        System.Threading.Tasks.Task<ConvertToViewData> PutSqlToViewDesignAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL.
        /// </summary>
        /// <remarks>
        /// SQL which creates a view into a structured ConvertToViewData object
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertToViewData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertToViewData>> PutSqlToViewDesignWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Writer Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriterDesign</returns>
        System.Threading.Tasks.Task<WriterDesign> PutSqlToWriterDesignAsync(string body, bool? mergeAdditionalMappingFields = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible.
        /// </summary>
        /// <remarks>
        /// SQL to attempt to create a Writer Design object from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriterDesign)</returns>
        System.Threading.Tasks.Task<ApiResponse<WriterDesign>> PutSqlToWriterDesignWithHttpInfoAsync(string body, bool? mergeAdditionalMappingFields = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design
        /// </summary>
        /// <remarks>
        /// Converts a ConvertToView specification into SQL that creates a view
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutViewDesignToSqlAsync(ConvertToViewData convertToViewData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design
        /// </summary>
        /// <remarks>
        /// Converts a ConvertToView specification into SQL that creates a view
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutViewDesignToSqlWithHttpInfoAsync(ConvertToViewData convertToViewData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure
        /// </summary>
        /// <remarks>
        /// SQL Writer Design specification to generate Writer SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWriterDesignToSqlAsync(WriterDesign writerDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure
        /// </summary>
        /// <remarks>
        /// SQL Writer Design specification to generate Writer SQL from
        /// </remarks>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWriterDesignToSqlWithHttpInfoAsync(WriterDesign writerDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlDesignApi : ISqlDesignApiSync, ISqlDesignApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SqlDesignApi : ISqlDesignApi
    {
        private Finbourne.Luminesce.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlDesignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlDesignApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlDesignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlDesignApi(String basePath)
        {
            this.Configuration = Finbourne.Luminesce.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Luminesce.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Luminesce.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Luminesce.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Luminesce.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Luminesce.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlDesignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SqlDesignApi(Finbourne.Luminesce.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Luminesce.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Luminesce.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Luminesce.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlDesignApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SqlDesignApi(Finbourne.Luminesce.Sdk.Client.ISynchronousClient client, Finbourne.Luminesce.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Luminesce.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Luminesce.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Luminesce.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Luminesce.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Luminesce.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Luminesce.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <returns>FileReaderBuilderResponse</returns>
        public FileReaderBuilderResponse PutFileReadDesignToSql(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderResponse> localVarResponse = PutFileReadDesignToSqlWithHttpInfo(fileReaderBuilderDef, executeQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <returns>ApiResponse of FileReaderBuilderResponse</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderResponse> PutFileReadDesignToSqlWithHttpInfo(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?))
        {
            // verify the required parameter 'fileReaderBuilderDef' is set
            if (fileReaderBuilderDef == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'fileReaderBuilderDef' when calling SqlDesignApi->PutFileReadDesignToSql");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (executeQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "executeQuery", executeQuery));
            }
            localVarRequestOptions.Data = fileReaderBuilderDef;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileReaderBuilderResponse>("/api/Sql/fromfilereaddesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutFileReadDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileReaderBuilderResponse</returns>
        public async System.Threading.Tasks.Task<FileReaderBuilderResponse> PutFileReadDesignToSqlAsync(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderResponse> localVarResponse = await PutFileReadDesignToSqlWithHttpInfoAsync(fileReaderBuilderDef, executeQuery, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutFileReadDesignToSql: Generates file read SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileReaderBuilderDef">Structured file read design object to generate SQL from</param>
        /// <param name="executeQuery">Should the generated query be executed to build preview data or determine errors.&gt; (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileReaderBuilderResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderResponse>> PutFileReadDesignToSqlWithHttpInfoAsync(FileReaderBuilderDef fileReaderBuilderDef, bool? executeQuery = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileReaderBuilderDef' is set
            if (fileReaderBuilderDef == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'fileReaderBuilderDef' when calling SqlDesignApi->PutFileReadDesignToSql");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (executeQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "executeQuery", executeQuery));
            }
            localVarRequestOptions.Data = fileReaderBuilderDef;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileReaderBuilderResponse>("/api/Sql/fromfilereaddesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutFileReadDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible. SQL to attempt to create an inlined properties Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <returns>InlinedPropertyDesign</returns>
        public InlinedPropertyDesign PutInlinedPropertiesDesignSqlToDesign(string body = default(string))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<InlinedPropertyDesign> localVarResponse = PutInlinedPropertiesDesignSqlToDesignWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible. SQL to attempt to create an inlined properties Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <returns>ApiResponse of InlinedPropertyDesign</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<InlinedPropertyDesign> PutInlinedPropertiesDesignSqlToDesignWithHttpInfo(string body = default(string))
        {
            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<InlinedPropertyDesign>("/api/Sql/toinlinedpropertiesdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutInlinedPropertiesDesignSqlToDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible. SQL to attempt to create an inlined properties Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlinedPropertyDesign</returns>
        public async System.Threading.Tasks.Task<InlinedPropertyDesign> PutInlinedPropertiesDesignSqlToDesignAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<InlinedPropertyDesign> localVarResponse = await PutInlinedPropertiesDesignSqlToDesignWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Generates a SQL-inlined-properties-design object from SQL string, if possible. SQL to attempt to create an inlined properties Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the inlined properties design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlinedPropertyDesign)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<InlinedPropertyDesign>> PutInlinedPropertiesDesignSqlToDesignWithHttpInfoAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InlinedPropertyDesign>("/api/Sql/toinlinedpropertiesdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutInlinedPropertiesDesignSqlToDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design Inlined properties Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <returns>string</returns>
        public string PutInlinedPropertiesDesignToSql(InlinedPropertyDesign inlinedPropertyDesign)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = PutInlinedPropertiesDesignToSqlWithHttpInfo(inlinedPropertyDesign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design Inlined properties Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<string> PutInlinedPropertiesDesignToSqlWithHttpInfo(InlinedPropertyDesign inlinedPropertyDesign)
        {
            // verify the required parameter 'inlinedPropertyDesign' is set
            if (inlinedPropertyDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'inlinedPropertyDesign' when calling SqlDesignApi->PutInlinedPropertiesDesignToSql");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlinedPropertyDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/Sql/frominlinedpropertiesdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutInlinedPropertiesDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design Inlined properties Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutInlinedPropertiesDesignToSqlAsync(InlinedPropertyDesign inlinedPropertyDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = await PutInlinedPropertiesDesignToSqlWithHttpInfoAsync(inlinedPropertyDesign, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Generates inlined properties SQL from a structured design Inlined properties Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlinedPropertyDesign">Structured file read design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<string>> PutInlinedPropertiesDesignToSqlWithHttpInfoAsync(InlinedPropertyDesign inlinedPropertyDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlinedPropertyDesign' is set
            if (inlinedPropertyDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'inlinedPropertyDesign' when calling SqlDesignApi->PutInlinedPropertiesDesignToSql");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlinedPropertyDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/Sql/frominlinedpropertiesdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutInlinedPropertiesDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <returns>IntellisenseResponse</returns>
        public IntellisenseResponse PutIntellisense(IntellisenseRequest intellisenseRequest)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<IntellisenseResponse> localVarResponse = PutIntellisenseWithHttpInfo(intellisenseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <returns>ApiResponse of IntellisenseResponse</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<IntellisenseResponse> PutIntellisenseWithHttpInfo(IntellisenseRequest intellisenseRequest)
        {
            // verify the required parameter 'intellisenseRequest' is set
            if (intellisenseRequest == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'intellisenseRequest' when calling SqlDesignApi->PutIntellisense");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = intellisenseRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<IntellisenseResponse>("/api/Sql/intellisense", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntellisense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntellisenseResponse</returns>
        public async System.Threading.Tasks.Task<IntellisenseResponse> PutIntellisenseAsync(IntellisenseRequest intellisenseRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<IntellisenseResponse> localVarResponse = await PutIntellisenseWithHttpInfoAsync(intellisenseRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutIntellisense: Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid) and cursor location SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intellisenseRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntellisenseResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<IntellisenseResponse>> PutIntellisenseWithHttpInfoAsync(IntellisenseRequest intellisenseRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'intellisenseRequest' is set
            if (intellisenseRequest == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'intellisenseRequest' when calling SqlDesignApi->PutIntellisense");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = intellisenseRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<IntellisenseResponse>("/api/Sql/intellisense", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntellisense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines) SQL (by line) to syntax check and return error ranges from within, if any.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <returns>ErrorHighlightResponse</returns>
        public ErrorHighlightResponse PutIntellisenseError(ErrorHighlightRequest errorHighlightRequest)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ErrorHighlightResponse> localVarResponse = PutIntellisenseErrorWithHttpInfo(errorHighlightRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines) SQL (by line) to syntax check and return error ranges from within, if any.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <returns>ApiResponse of ErrorHighlightResponse</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<ErrorHighlightResponse> PutIntellisenseErrorWithHttpInfo(ErrorHighlightRequest errorHighlightRequest)
        {
            // verify the required parameter 'errorHighlightRequest' is set
            if (errorHighlightRequest == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'errorHighlightRequest' when calling SqlDesignApi->PutIntellisenseError");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = errorHighlightRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ErrorHighlightResponse>("/api/Sql/intellisenseError", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntellisenseError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines) SQL (by line) to syntax check and return error ranges from within, if any.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErrorHighlightResponse</returns>
        public async System.Threading.Tasks.Task<ErrorHighlightResponse> PutIntellisenseErrorAsync(ErrorHighlightRequest errorHighlightRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ErrorHighlightResponse> localVarResponse = await PutIntellisenseErrorWithHttpInfoAsync(errorHighlightRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutIntellisenseError: Generate a set of error ranges, if any, in the given SQL (expressed as Lines) SQL (by line) to syntax check and return error ranges from within, if any.
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorHighlightRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErrorHighlightResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<ErrorHighlightResponse>> PutIntellisenseErrorWithHttpInfoAsync(ErrorHighlightRequest errorHighlightRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'errorHighlightRequest' is set
            if (errorHighlightRequest == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'errorHighlightRequest' when calling SqlDesignApi->PutIntellisenseError");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = errorHighlightRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ErrorHighlightResponse>("/api/Sql/intellisenseError", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntellisenseError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <returns>string</returns>
        public string PutQueryDesignToSql(QueryDesign queryDesign)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = PutQueryDesignToSqlWithHttpInfo(queryDesign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<string> PutQueryDesignToSqlWithHttpInfo(QueryDesign queryDesign)
        {
            // verify the required parameter 'queryDesign' is set
            if (queryDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'queryDesign' when calling SqlDesignApi->PutQueryDesignToSql");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = queryDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/Sql/fromdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutQueryDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutQueryDesignToSqlAsync(QueryDesign queryDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = await PutQueryDesignToSqlWithHttpInfoAsync(queryDesign, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutQueryDesignToSql: Generates SQL from a structured query design SQL Designer specification to generate SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDesign">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<string>> PutQueryDesignToSqlWithHttpInfoAsync(QueryDesign queryDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'queryDesign' is set
            if (queryDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'queryDesign' when calling SqlDesignApi->PutQueryDesignToSql");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = queryDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/Sql/fromdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutQueryDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <returns>string</returns>
        public string PutQueryToFormat(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = PutQueryToFormatWithHttpInfo(body, trailingCommas, uppercaseKeywords, breakJoinOnSections, spaceAfterExpandedComma, keywordStandardization, expandCommaLists, expandInLists, expandBooleanExpressions, expandBetweenConditions, expandCaseStatements, maxLineWidth, spaceBeforeTrailingSingleLineComments, multilineCommentExtraLineBreak);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<string> PutQueryToFormatWithHttpInfo(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutQueryToFormat");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (trailingCommas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "trailingCommas", trailingCommas));
            }
            if (uppercaseKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uppercaseKeywords", uppercaseKeywords));
            }
            if (breakJoinOnSections != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "breakJoinOnSections", breakJoinOnSections));
            }
            if (spaceAfterExpandedComma != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "spaceAfterExpandedComma", spaceAfterExpandedComma));
            }
            if (keywordStandardization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "keywordStandardization", keywordStandardization));
            }
            if (expandCommaLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandCommaLists", expandCommaLists));
            }
            if (expandInLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandInLists", expandInLists));
            }
            if (expandBooleanExpressions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandBooleanExpressions", expandBooleanExpressions));
            }
            if (expandBetweenConditions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandBetweenConditions", expandBetweenConditions));
            }
            if (expandCaseStatements != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandCaseStatements", expandCaseStatements));
            }
            if (maxLineWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxLineWidth", maxLineWidth));
            }
            if (spaceBeforeTrailingSingleLineComments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "spaceBeforeTrailingSingleLineComments", spaceBeforeTrailingSingleLineComments));
            }
            if (multilineCommentExtraLineBreak != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "multilineCommentExtraLineBreak", multilineCommentExtraLineBreak));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/Sql/pretty", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutQueryToFormat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutQueryToFormatAsync(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = await PutQueryToFormatWithHttpInfoAsync(body, trailingCommas, uppercaseKeywords, breakJoinOnSections, spaceAfterExpandedComma, keywordStandardization, expandCommaLists, expandInLists, expandBooleanExpressions, expandBetweenConditions, expandCaseStatements, maxLineWidth, spaceBeforeTrailingSingleLineComments, multilineCommentExtraLineBreak, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PutQueryToFormat: Formats SQL into a more readable form, a.k.a. Pretty-Print the SQL.  This formats SQL (given a set of options as to how to do so). It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. &#x60;&#x60;&#x60;sql select x,y,z from a inner join b on a.x&#x3D;b.x where x&gt;y or y!&#x3D;z &#x60;&#x60;&#x60; becomes &#x60;&#x60;&#x60;sql select x, y, z from a inner join b    on a.x &#x3D; b.x where x &gt; y    or y !&#x3D; z &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LuminesceSql to Pretty-Print. Even if it doesn&#39;t parse an attempt will be made to format it</param>
        /// <param name="trailingCommas">Should commas be after an expression (as opposed to before) (optional, default to true)</param>
        /// <param name="uppercaseKeywords">Should key words be capitalized (optional, default to false)</param>
        /// <param name="breakJoinOnSections">Should clauses on joins be given line breaks? (optional, default to true)</param>
        /// <param name="spaceAfterExpandedComma">Should comma-lists have spaces after the commas? (optional, default to true)</param>
        /// <param name="keywordStandardization">Should the \&quot;nicest\&quot; key words be used? (e.g. JOIN -&gt; INNER JOIN) (optional, default to true)</param>
        /// <param name="expandCommaLists">Should comma-lists (e.g. select a,b,c) have line breaks added? (optional, default to false)</param>
        /// <param name="expandInLists">Should IN-lists have line breaks added? (optional, default to false)</param>
        /// <param name="expandBooleanExpressions">Should boolean expressions have line breaks added? (optional, default to true)</param>
        /// <param name="expandBetweenConditions">Should between conditions have line breaks added? (optional, default to true)</param>
        /// <param name="expandCaseStatements">Should case-statements have line breaks added? (optional, default to true)</param>
        /// <param name="maxLineWidth">Maximum number of characters to allow on one line (if possible) (optional, default to 120)</param>
        /// <param name="spaceBeforeTrailingSingleLineComments">Should the be a space before trailing single line comments? (optional, default to true)</param>
        /// <param name="multilineCommentExtraLineBreak">Should an additional line break be added after multi-line comments? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<string>> PutQueryToFormatWithHttpInfoAsync(string body, bool? trailingCommas = default(bool?), bool? uppercaseKeywords = default(bool?), bool? breakJoinOnSections = default(bool?), bool? spaceAfterExpandedComma = default(bool?), bool? keywordStandardization = default(bool?), bool? expandCommaLists = default(bool?), bool? expandInLists = default(bool?), bool? expandBooleanExpressions = default(bool?), bool? expandBetweenConditions = default(bool?), bool? expandCaseStatements = default(bool?), int? maxLineWidth = default(int?), bool? spaceBeforeTrailingSingleLineComments = default(bool?), bool? multilineCommentExtraLineBreak = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutQueryToFormat");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (trailingCommas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "trailingCommas", trailingCommas));
            }
            if (uppercaseKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uppercaseKeywords", uppercaseKeywords));
            }
            if (breakJoinOnSections != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "breakJoinOnSections", breakJoinOnSections));
            }
            if (spaceAfterExpandedComma != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "spaceAfterExpandedComma", spaceAfterExpandedComma));
            }
            if (keywordStandardization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "keywordStandardization", keywordStandardization));
            }
            if (expandCommaLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandCommaLists", expandCommaLists));
            }
            if (expandInLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandInLists", expandInLists));
            }
            if (expandBooleanExpressions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandBooleanExpressions", expandBooleanExpressions));
            }
            if (expandBetweenConditions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandBetweenConditions", expandBetweenConditions));
            }
            if (expandCaseStatements != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "expandCaseStatements", expandCaseStatements));
            }
            if (maxLineWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxLineWidth", maxLineWidth));
            }
            if (spaceBeforeTrailingSingleLineComments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "spaceBeforeTrailingSingleLineComments", spaceBeforeTrailingSingleLineComments));
            }
            if (multilineCommentExtraLineBreak != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "multilineCommentExtraLineBreak", multilineCommentExtraLineBreak));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/Sql/pretty", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutQueryToFormat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement SQL to extract scalar parameters from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <returns>ICollection&lt;ScalarParameter&gt;</returns>
        public ICollection<ScalarParameter> PutSqlToExtractScalarParameters(string body)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ICollection<ScalarParameter>> localVarResponse = PutSqlToExtractScalarParametersWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement SQL to extract scalar parameters from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <returns>ApiResponse of ICollection&lt;ScalarParameter&gt;</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<ICollection<ScalarParameter>> PutSqlToExtractScalarParametersWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToExtractScalarParameters");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ICollection<ScalarParameter>>("/api/Sql/extractscalarparameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToExtractScalarParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement SQL to extract scalar parameters from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;ScalarParameter&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<ScalarParameter>> PutSqlToExtractScalarParametersAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ICollection<ScalarParameter>> localVarResponse = await PutSqlToExtractScalarParametersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToExtractScalarParameters: Generates information about all the scalar parameters defined in the given SQL statement SQL to extract scalar parameters from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ScalarParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<ICollection<ScalarParameter>>> PutSqlToExtractScalarParametersWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToExtractScalarParameters");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ICollection<ScalarParameter>>("/api/Sql/extractscalarparameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToExtractScalarParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <returns>FileReaderBuilderDef</returns>
        public FileReaderBuilderDef PutSqlToFileReadDesign(bool? determineAvailableSources = default(bool?), string body = default(string))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderDef> localVarResponse = PutSqlToFileReadDesignWithHttpInfo(determineAvailableSources, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <returns>ApiResponse of FileReaderBuilderDef</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderDef> PutSqlToFileReadDesignWithHttpInfo(bool? determineAvailableSources = default(bool?), string body = default(string))
        {
            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (determineAvailableSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "determineAvailableSources", determineAvailableSources));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileReaderBuilderDef>("/api/Sql/tofilereaddesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToFileReadDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileReaderBuilderDef</returns>
        public async System.Threading.Tasks.Task<FileReaderBuilderDef> PutSqlToFileReadDesignAsync(bool? determineAvailableSources = default(bool?), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderDef> localVarResponse = await PutSqlToFileReadDesignWithHttpInfoAsync(determineAvailableSources, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToFileReadDesign: Generates a SQL-file-read-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="determineAvailableSources">Should the available sources be determined from &#x60;Sys.Registration&#x60; (optional, default to true)</param>
        /// <param name="body">SQL query to generate the file read design object from (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileReaderBuilderDef)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<FileReaderBuilderDef>> PutSqlToFileReadDesignWithHttpInfoAsync(bool? determineAvailableSources = default(bool?), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (determineAvailableSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "determineAvailableSources", determineAvailableSources));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileReaderBuilderDef>("/api/Sql/tofilereaddesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToFileReadDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <returns>QueryDesign</returns>
        public QueryDesign PutSqlToQueryDesign(string body, bool? validateWithMetadata = default(bool?))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<QueryDesign> localVarResponse = PutSqlToQueryDesignWithHttpInfo(body, validateWithMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <returns>ApiResponse of QueryDesign</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<QueryDesign> PutSqlToQueryDesignWithHttpInfo(string body, bool? validateWithMetadata = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToQueryDesign");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validateWithMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validateWithMetadata", validateWithMetadata));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<QueryDesign>("/api/Sql/todesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToQueryDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryDesign</returns>
        public async System.Threading.Tasks.Task<QueryDesign> PutSqlToQueryDesignAsync(string body, bool? validateWithMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<QueryDesign> localVarResponse = await PutSqlToQueryDesignWithHttpInfoAsync(body, validateWithMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToQueryDesign: Generates a SQL-design object from SQL string, if possible. SQL to attempt to create a Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the design object from</param>
        /// <param name="validateWithMetadata">Should the table be validated against the users&#39; view of Sys.Field to fill in DataTypes, etc.? (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryDesign)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<QueryDesign>> PutSqlToQueryDesignWithHttpInfoAsync(string body, bool? validateWithMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToQueryDesign");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validateWithMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validateWithMetadata", validateWithMetadata));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<QueryDesign>("/api/Sql/todesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToQueryDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL. SQL which creates a view into a structured ConvertToViewData object
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <returns>ConvertToViewData</returns>
        public ConvertToViewData PutSqlToViewDesign(string body)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ConvertToViewData> localVarResponse = PutSqlToViewDesignWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL. SQL which creates a view into a structured ConvertToViewData object
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <returns>ApiResponse of ConvertToViewData</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<ConvertToViewData> PutSqlToViewDesignWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToViewDesign");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ConvertToViewData>("/api/Sql/toviewdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToViewDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL. SQL which creates a view into a structured ConvertToViewData object
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertToViewData</returns>
        public async System.Threading.Tasks.Task<ConvertToViewData> PutSqlToViewDesignAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<ConvertToViewData> localVarResponse = await PutSqlToViewDesignWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToViewDesign: Generates a structured view creation design from existing view creation SQL. SQL which creates a view into a structured ConvertToViewData object
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL Query to generate the ConvertToViewData object from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertToViewData)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<ConvertToViewData>> PutSqlToViewDesignWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToViewDesign");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ConvertToViewData>("/api/Sql/toviewdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToViewDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible. SQL to attempt to create a Writer Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <returns>WriterDesign</returns>
        public WriterDesign PutSqlToWriterDesign(string body, bool? mergeAdditionalMappingFields = default(bool?))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<WriterDesign> localVarResponse = PutSqlToWriterDesignWithHttpInfo(body, mergeAdditionalMappingFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible. SQL to attempt to create a Writer Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <returns>ApiResponse of WriterDesign</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<WriterDesign> PutSqlToWriterDesignWithHttpInfo(string body, bool? mergeAdditionalMappingFields = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToWriterDesign");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (mergeAdditionalMappingFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mergeAdditionalMappingFields", mergeAdditionalMappingFields));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<WriterDesign>("/api/Sql/towriterdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToWriterDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible. SQL to attempt to create a Writer Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriterDesign</returns>
        public async System.Threading.Tasks.Task<WriterDesign> PutSqlToWriterDesignAsync(string body, bool? mergeAdditionalMappingFields = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<WriterDesign> localVarResponse = await PutSqlToWriterDesignWithHttpInfoAsync(body, mergeAdditionalMappingFields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutSqlToWriterDesign: Generates a SQL-writer-design object from SQL string, if possible. SQL to attempt to create a Writer Design object from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">SQL query to generate the writer design object from</param>
        /// <param name="mergeAdditionalMappingFields">Should &#x60;Sys.Field&#x60; be used to find additional potential fields to map from? (not always possible) (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriterDesign)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<WriterDesign>> PutSqlToWriterDesignWithHttpInfoAsync(string body, bool? mergeAdditionalMappingFields = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling SqlDesignApi->PutSqlToWriterDesign");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "text/plain"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (mergeAdditionalMappingFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Luminesce.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mergeAdditionalMappingFields", mergeAdditionalMappingFields));
            }
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WriterDesign>("/api/Sql/towriterdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSqlToWriterDesign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design Converts a ConvertToView specification into SQL that creates a view
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <returns>string</returns>
        public string PutViewDesignToSql(ConvertToViewData convertToViewData)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = PutViewDesignToSqlWithHttpInfo(convertToViewData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design Converts a ConvertToView specification into SQL that creates a view
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<string> PutViewDesignToSqlWithHttpInfo(ConvertToViewData convertToViewData)
        {
            // verify the required parameter 'convertToViewData' is set
            if (convertToViewData == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'convertToViewData' when calling SqlDesignApi->PutViewDesignToSql");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = convertToViewData;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/Sql/fromviewdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutViewDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design Converts a ConvertToView specification into SQL that creates a view
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutViewDesignToSqlAsync(ConvertToViewData convertToViewData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = await PutViewDesignToSqlWithHttpInfoAsync(convertToViewData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutViewDesignToSql: Generates view creation sql from a structured view creation design Converts a ConvertToView specification into SQL that creates a view
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertToViewData">Structured Query design object to generate SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<string>> PutViewDesignToSqlWithHttpInfoAsync(ConvertToViewData convertToViewData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convertToViewData' is set
            if (convertToViewData == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'convertToViewData' when calling SqlDesignApi->PutViewDesignToSql");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = convertToViewData;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/Sql/fromviewdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutViewDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure SQL Writer Design specification to generate Writer SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <returns>string</returns>
        public string PutWriterDesignToSql(WriterDesign writerDesign)
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = PutWriterDesignToSqlWithHttpInfo(writerDesign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure SQL Writer Design specification to generate Writer SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Luminesce.Sdk.Client.ApiResponse<string> PutWriterDesignToSqlWithHttpInfo(WriterDesign writerDesign)
        {
            // verify the required parameter 'writerDesign' is set
            if (writerDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'writerDesign' when calling SqlDesignApi->PutWriterDesignToSql");

            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = writerDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/Sql/fromwriterdesign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWriterDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure SQL Writer Design specification to generate Writer SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWriterDesignToSqlAsync(WriterDesign writerDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Luminesce.Sdk.Client.ApiResponse<string> localVarResponse = await PutWriterDesignToSqlWithHttpInfoAsync(writerDesign, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] PutWriterDesignToSql: Generates writer SQL from a valid writer-design structure SQL Writer Design specification to generate Writer SQL from
        /// </summary>
        /// <exception cref="Finbourne.Luminesce.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writerDesign">Structured Writer Design design object to generate Writer SQL from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Luminesce.Sdk.Client.ApiResponse<string>> PutWriterDesignToSqlWithHttpInfoAsync(WriterDesign writerDesign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'writerDesign' is set
            if (writerDesign == null)
                throw new Finbourne.Luminesce.Sdk.Client.ApiException(400, "Missing required parameter 'writerDesign' when calling SqlDesignApi->PutWriterDesignToSql");


            Finbourne.Luminesce.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Luminesce.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Luminesce.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = writerDesign;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "1.16.430");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/Sql/fromwriterdesign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWriterDesignToSql", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}