/*
 * FINBOURNE Luminesce Web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.182
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// QueryDesign
    /// </summary>
    [DataContract(Name = "QueryDesign")]
    public partial class QueryDesign : IEquatable<QueryDesign>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryDesign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryDesign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryDesign" /> class.
        /// </summary>
        /// <param name="tableName">tableName (required).</param>
        /// <param name="alias">alias.</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="orderBy">orderBy.</param>
        /// <param name="limit">limit.</param>
        /// <param name="warnings">warnings.</param>
        public QueryDesign(string tableName = default(string), string alias = default(string), List<FieldDesign> fields = default(List<FieldDesign>), List<OrderByTermDesign> orderBy = default(List<OrderByTermDesign>), int? limit = default(int?), List<string> warnings = default(List<string>))
        {
            // to ensure "tableName" is required (not null)
            this.TableName = tableName ?? throw new ArgumentNullException("tableName is a required property for QueryDesign and cannot be null");
            // to ensure "fields" is required (not null)
            this.Fields = fields ?? throw new ArgumentNullException("fields is a required property for QueryDesign and cannot be null");
            this.Alias = alias;
            this.OrderBy = orderBy;
            this.Limit = limit;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name = "tableName", IsRequired = true, EmitDefaultValue = false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = false)]
        public List<FieldDesign> Fields { get; set; }

        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>
        [DataMember(Name = "orderBy", EmitDefaultValue = true)]
        public List<OrderByTermDesign> OrderBy { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = true)]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryDesign {\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryDesign);
        }

        /// <summary>
        /// Returns true if QueryDesign instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryDesign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryDesign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.OrderBy == input.OrderBy ||
                    this.OrderBy != null &&
                    input.OrderBy != null &&
                    this.OrderBy.SequenceEqual(input.OrderBy)
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.OrderBy != null)
                    hashCode = hashCode * 59 + this.OrderBy.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                return hashCode;
            }
        }

    }
}
